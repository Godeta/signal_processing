/**
    * This file is the main file : it creates the gui and calls the "apply_algorithms.sci" file
    in order to process the data.
**/


clc;
clear;
for i=1:25 //close 25 times the current window to make sure all open windows are closed
    close()
end


//  * get my functions
PATH = get_absolute_file_path("gui.sce");
P_PROTO = '\data_compare\proto';
P_REF = '\data_compare\capteurs';
PATH_IMAGE = PATH + "title.jpg";
chdir(PATH)
getd('lib');

// parameters
listPeakText = 'none|find_extremum|peakfinder|localmax|detect_peaks_naive|local_min_noisy | peakfinderMin'; //replace 'find_extremum|peakfinder' 
listFilteringText = 'none|convolution|circular convolution|median|hampel|moving average |sgolay filter |customLap |Gauss filter |fast root mean square'; // replace 'median'
listPreProText = 'none|smoothIrregular|smoothDataGT|smartPreProcess|cutIrregular'; // replace 'none'
NB_DATA_FILES = 11;

global dataProto
dataProto=cell(NB_DATA_FILES,1);
dataRef = cell(NB_DATA_FILES,1);

for i=1:NB_DATA_FILES //for as many data files as we have
         //get the data
            dataProto{i}= csvRead(PATH+P_PROTO+string(i)+'.csv',",");
            dataRef{i}= csvRead(PATH+P_REF+string(i)+'.csv',",");
end


//GUI_SHOW();

// This GUI file is generated by guibuilder version 4.2.1
//////////
f=figure('figure_position',[378,75],'figure_size',[1074,540],'auto_resize','on','background',[33],'figure_name','Graphic window number %d','dockable','off','infobar_visible','off','toolbar_visible','off','menubar_visible','off','default_axes','on','visible','off');
//////////
handles.dummy = 0;
handles.checkPlot=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.6936274,0.1381633,0.2215385,0.0975057],'Relief','default','SliderStep',[0.01,0.1],'String','Plot charts','Style','checkbox','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','checkPlot','Callback','checkPlot_callback(handles)')
handles.listPeaks=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[1],'Max',[1],'Min',[0],'Position',[0.0373167,0.0881633,0.2964744,0.1407029],'Relief','default','SliderStep',[0.01,0.1],'String',listPeakText,'Style','listbox','Value',[2],'VerticalAlignment','middle','Visible','on','Tag','listPeaks','Callback','listPeaks_callback(handles)')
handles.title=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3516346,0.9024943,0.2996795,0.0952381],'Relief','default','SliderStep',[0.01,0.1],'String','title.jpg','Style','image','Value',[1,1,0,0,0],'VerticalAlignment','middle','Visible','on','Tag','title','Callback','title_callback(handles)')
handles.vectorEntry=uicontrol(f,'unit','normalized','BackgroundColor',[0.2,0.6,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3884936,0.4016326,0.2259615,0.138322],'Relief','default','SliderStep',[0.01,0.1],'String','[1/3 1/3 1/3]','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','vectorEntry','Callback','')
handles.listFilters=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[1],'Max',[1],'Min',[0],'Position',[0.0373167,0.390907,0.2964744,0.1497732],'Relief','default','SliderStep',[0.01,0.1],'String',listFilteringText,'Style','listbox','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','listFilters','Callback','listFilters_callback(handles)')
handles.checkPdata=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.6936274,0.477483,0.2215385,0.0975057],'Relief','default','SliderStep',[0.01,0.1],'String','Plot processed data','Style','checkbox','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','checkPdata','Callback','checkPdata_callback(handles)')
handles.checkFilterCreation=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.6916026,0.3745125,0.2215385,0.0770975],'Relief','default','SliderStep',[0.01,0.1],'String','Create filter','Style','checkbox','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','checkFilterCreation','Callback','checkFilterCreation_callback(handles)')
handles.textFilter=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Impact','FontSize',[16],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0661016,0.5760317,0.2399359,0.0766893],'Relief','default','SliderStep',[0.01,0.1],'String','Filtering','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','textFilter','Callback','')
handles.textPeak=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Impact','FontSize',[16],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0661016,0.2579365,0.2399359,0.0766893],'Relief','default','SliderStep',[0.01,0.1],'String','Detection of the peaks','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','textPeak','Callback','')
handles.credit=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[10],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.7380769,-0.0854649,0.2591026,0.0294785],'Relief','default','SliderStep',[0.01,0.1],'String','Réalisé par Arnaud GODET 12/2022','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','credit','Callback','')
handles.textVector=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Impact','FontSize',[16],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3815064,0.5760317,0.2399359,0.0766893],'Relief','default','SliderStep',[0.01,0.1],'String','Convolution vector','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','textVector','Callback','')
handles.startButton=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Verdana','FontSize',[18],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3532372,0.0120408,0.2964744,0.0952381],'Relief','default','SliderStep',[0.01,0.1],'String','Press to start','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','startButton','Callback','startButton_callback(handles)')
handles.checkCSV=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Verdana','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.4003906,0.1472035,0.2215385,0.0773783],'Relief','default','SliderStep',[0.01,0.1],'String','Generate CSV','Style','checkbox','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','checkCSV','Callback','checkCSV_callback(handles)')
handles.textPreProc=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Impact','FontSize',[16],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0661016,0.8363872,0.2399359,0.0766893],'Relief','default','SliderStep',[0.01,0.1],'String','Preprocessing','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','textPreProc','Callback','')
handles.listPreProc=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[1],'Max',[1],'Min',[0],'Position',[0.0373167,0.6766667,0.2964744,0.1297206],'Relief','default','SliderStep',[0.01,0.1],'String',listPreProText,'Style','listbox','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','listPreProc','Callback','listPreProc_callback(handles)')
handles.checkPrePro=uicontrol(f,'unit','normalized','BackgroundColor',[0.1,0.1,0.1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.6936274,0.7005389,0.2215385,0.0975057],'Relief','default','SliderStep',[0.01,0.1],'String','Plot preprocessed data','Style','checkbox','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','checkPrePro','Callback','checkPrePro_callback(handles)')


f.visible = "on";


//////////
// Callbacks are defined as below. Please do not delete the comments as it will be used in coming version
//////////

function checkPlot_callback(handles)
    disp(get(handles.checkPlot,"value"));
endfunction

//on click on the list of peak 
function listPeaks_callback(handles)
    choice = get(handles.listPeaks, "value");
    //if we choose something else than "none"
    if (choice >1) then
            
      for i=1:NB_DATA_FILES //for as many data files as we have
        
        //get the data from our table
        proto= dataProto{i};
        ref= dataRef{i};
        //disp(dataProto{i}(:,2))
        //apply peak detection algorithm
        // nbBouteille1 gets the number of bottles counted, vide is empty
        [nbBouteille1, vide] = count_peaks(proto(:,1),proto(:,2),-1,choice, get(handles.checkPlot,"value"));
        //nbBouteilleRef1 gets the number of bottles counted by the Sick sensor while nbBouteilleRef2 is for the antenna sensor
        [nbBouteilleRef1, nbBouteilleRef2] = count_peaks(ref(:,1),ref(:,2),ref(:,3),choice, get(handles.checkPlot,"value"));
        
        //display results in prompt
        disp("Nombre bouteilles du fichier prototype "+string(i)+" -> "+string(length(nbBouteille1)) );//+ " taille des données : "+ string(length(proto(:,2))));
        disp("Nombre bouteilles du fichier de réference "+string(i)+" Sick  -> "+string(length(nbBouteilleRef1))+" Antenne  -> "+string(length(nbBouteilleRef2)) );//+ " taille des données : "+ string(length(ref(:,2))));
        end
    end
endfunction


function title_callback(handles)
//Write your callback for  title  here
endfunction



function listFilters_callback(handles)
    choice2 = get(handles.listFilters, "value");
    //if we choose something else than "none"
    if (choice2 >1) then
            
      for i=1:NB_DATA_FILES //for as many data files as we have
        
        //get the data
        proto= csvRead(PATH+P_PROTO+string(i)+'.csv',",");
        ref= csvRead(PATH+P_REF+string(i)+'.csv',",");
        
        //apply peak detection algorithm
            
        //when we check the create filter box It will make a linear convolution using the text inside our vectorEntry box 
        if(get(handles.checkFilterCreation,"value")) then
            //when whe chose circular convolution
            if (choice2==3) then
                [resultat1, resultat2]= circ_convolution_process(proto(:,2), evstr(get(handles.vectorEntry,"String")),-1,get(handles.checkPdata,"value"));
                dataProto{i}(:,2)=resultat1;
            else //linear convolution
               [resultat1, resultat2]= convolution_process(proto(:,2), evstr(get(handles.vectorEntry,"String")),-1,get(handles.checkPdata,"value"));
                dataProto{i}(:,2)=resultat1;
               //disp(dataProto{i}(:,2))
                //disp(get(handles.checkPlot,"value"))
            end
        else //if we don't create the filter
            [resultat1, resultat2] = process_data(proto(:,2), -1, choice2, get(handles.checkPdata,"value"))
            dataProto{i}(:,2)=resultat1;
            end
        
        
    end
    else 
        //if we choose the first one which is "none"
    end
endfunction

function checkPdata_callback(handles)
//Write your callback for  checkPdata  here

endfunction


function checkFilterCreation_callback(handles)
//Write your callback for  checkFilterCreation  here
disp(get(handles.checkFilterCreation,"value"));
disp(evstr(get(handles.vectorEntry,"String")))
//disp(dataProto{i}(:,2))
endfunction

function startButton_callback(handles)
//The start button will launch our test based on our parameters. It can also generate a CSV file with the result data.
    csvData=cell(3,NB_DATA_FILES+1);
    
    //first we preprocess the data
        choice3 = get(handles.listPreProc, "value");
            
      for i=1:NB_DATA_FILES //for as many data files as we have
        
        //get the data
        proto= csvRead(PATH+P_PROTO+string(i)+'.csv',",");
//        proto = dataProto{i};
        ref= csvRead(PATH+P_REF+string(i)+'.csv',",");
        
        //apply preprocessing
            resultat = preProcess_data(proto(:,1),proto(:,2), choice3, get(handles.checkPrePro,"value"))
            dataProto{i}(:,2)=resultat;
end

//----- second we take the filtered data
    choice2 = get(handles.listFilters, "value");
    //if we choose something else than "none"
    if (choice2 >1) then
            
      for i=1:NB_DATA_FILES //for as many data files as we have
        
        //get the data
        proto= dataProto{i};
        ref= csvRead(PATH+P_REF+string(i)+'.csv',",");
        
        //when we check the create filter box It will make a linear convolution using the text inside our vectorEntry box 
        if(get(handles.checkFilterCreation,"value")) then
            //when whe chose circular convolution
            if (choice2==3) then
                [resultat1, resultat2]= circ_convolution_process(proto(:,2), evstr(get(handles.vectorEntry,"String")),-1,get(handles.checkPdata,"value"));
                dataProto{i}(:,2)=resultat1;
            else //linear convolution
               [resultat1, resultat2]= convolution_process(proto(:,2), evstr(get(handles.vectorEntry,"String")),-1,get(handles.checkPdata,"value"));
                dataProto{i}(:,2)=resultat1;
               //disp(dataProto{i}(:,2))
                //disp(get(handles.checkPlot,"value"))
            end
        else //if we don't create the filter
            [resultat1, resultat2] = process_data(proto(:,2), -1, choice2, get(handles.checkPdata,"value"))
            dataProto{i}(:,2)=resultat1;
            end
    end
end

//----- then we aply our peak detection algorithm
    choice = get(handles.listPeaks, "value");
    
    //initialiser les 2 premières lignes du tableau csv
    csvData{1,1}= "Nb bouteilles prototype";
    csvData{2,1}= "Nb bouteilles Sick";
    csvData{3,1}= "Nb bouteilles antenne";
    //if we choose something else than "none"
    if (choice >1) then
            
      for i=1:NB_DATA_FILES //for as many data files as we have
        
        //get the data from our table
        proto= dataProto{i};
        ref= dataRef{i};
        //apply peak detection algorithm
        // nbBouteille1 gets the number of bottles counted, vide is empty
        [nbBouteille1, vide] = count_peaks(proto(:,1),proto(:,2),-1,choice, get(handles.checkPlot,"value"));
        //nbBouteilleRef1 gets the number of bottles counted by the Sick sensor while nbBouteilleRef2 is for the antenna sensor
        [nbBouteilleRef1, nbBouteilleRef2] = count_peaks(ref(:,1),ref(:,2),ref(:,3),choice, get(handles.checkPlot,"value"));
        
        //display results in prompt
        //disp("Nombre bouteilles du fichier prototype "+string(i)+" -> "+string(length(nbBouteille1)) );//+ " taille des données : "+ string(length(proto(:,2))));
        //disp("Nombre bouteilles du fichier de réference "+string(i)+" Sick  -> "+string(length(nbBouteilleRef1))+" Antenne  -> "+string(length(nbBouteilleRef2)) );//+ " taille des données : "+ string(length(ref(:,2))));
        
        //ajouter les résultats au tableau de données CSV
        csvData{1,i+1}= string(length(nbBouteille1));
        csvData{2,i+1}= string(length(nbBouteilleRef1));
        csvData{3,i+1}= string(length(nbBouteilleRef2));
        end
    end

//----- if CSV is checked It will generate a file in which we have our results.
    if(get(handles.checkCSV,"value")) then
        printf("\n");
        printf("############################################################################\n")
        printf(" Saving the result in a .cvs file \n")
        printf("############################################################################\n")
        printf("\n");
        RESU2 = mopen(PATH + "gui_data_output" + ".csv",'w') ;
        for i=1:NB_DATA_FILES+1
            disp(strcat([csvData{1,i} ";" csvData{2,i} ";" csvData{3,i} "\n"]))
            mfprintf(RESU2,strcat([csvData{1,i} ";" csvData{2,i} ";" csvData{3,i} "\n"]));
            end
        mfprintf(RESU2,'\n\n');
        mclose(RESU2);
        
    end
endfunction


function checkCSV_callback(handles)
//Write your callback for  checkCSV  here

endfunction


function listPreProc_callback(handles)
//Write your callback for  listPreProc  here
    choice2 = get(handles.listPreProc, "value");
    //if we choose something else than "none"
    if (choice2 >1) then
            
      for i=1:NB_DATA_FILES //for as many data files as we have
        
        //get the data
        proto= csvRead(PATH+P_PROTO+string(i)+'.csv',",");
        ref= csvRead(PATH+P_REF+string(i)+'.csv',",");
        
        //apply preprocessing
          
            resultat = preProcess_data(proto(:,1),proto(:,2), choice2, get(handles.checkPrePro,"value"))
            dataProto{i}(:,2)=resultat;
          
        
    end
    else 
        //if we choose the first one which is "none"
    end
endfunction


function checkPrePro_callback(handles)
//Write your callback for  checkPrePro  here
        disp(get(handles.checkPrePro,"value"));
endfunction
